use bevy_input::keyboard::KeyCode;
use crossterm::event::{self, KeyEvent, KeyModifiers};

/// Crossterm does not distinguish between left and right key modifiers,
/// so this function only returns `LShift` / `LControl` / `LAlt`.
pub fn convert_key_code(event: KeyEvent) -> Vec<KeyCode> {
    let mut key_codes = match event.code {
        event::KeyCode::Backspace => vec![KeyCode::Back],
        event::KeyCode::Enter => vec![KeyCode::Return],
        event::KeyCode::Left => vec![KeyCode::Left],
        event::KeyCode::Right => vec![KeyCode::Right],
        event::KeyCode::Up => vec![KeyCode::Up],
        event::KeyCode::Down => vec![KeyCode::Down],
        event::KeyCode::Home => vec![KeyCode::Home],
        event::KeyCode::End => vec![KeyCode::End],
        event::KeyCode::PageUp => vec![KeyCode::PageUp],
        event::KeyCode::PageDown => vec![KeyCode::PageDown],
        event::KeyCode::Tab => vec![KeyCode::Tab],
        event::KeyCode::BackTab => vec![KeyCode::Tab],
        event::KeyCode::Delete => vec![KeyCode::Delete],
        event::KeyCode::Insert => vec![KeyCode::Insert],
        event::KeyCode::F(1) => vec![KeyCode::F1],
        event::KeyCode::F(2) => vec![KeyCode::F2],
        event::KeyCode::F(3) => vec![KeyCode::F3],
        event::KeyCode::F(4) => vec![KeyCode::F4],
        event::KeyCode::F(5) => vec![KeyCode::F5],
        event::KeyCode::F(6) => vec![KeyCode::F6],
        event::KeyCode::F(7) => vec![KeyCode::F7],
        event::KeyCode::F(8) => vec![KeyCode::F8],
        event::KeyCode::F(9) => vec![KeyCode::F9],
        event::KeyCode::F(10) => vec![KeyCode::F10],
        event::KeyCode::F(11) => vec![KeyCode::F11],
        event::KeyCode::F(12) => vec![KeyCode::F12],
        event::KeyCode::F(13) => vec![KeyCode::F13],
        event::KeyCode::F(14) => vec![KeyCode::F14],
        event::KeyCode::F(15) => vec![KeyCode::F15],
        event::KeyCode::F(16) => vec![KeyCode::F16],
        event::KeyCode::F(17) => vec![KeyCode::F17],
        event::KeyCode::F(18) => vec![KeyCode::F18],
        event::KeyCode::F(19) => vec![KeyCode::F19],
        event::KeyCode::F(20) => vec![KeyCode::F20],
        event::KeyCode::F(21) => vec![KeyCode::F21],
        event::KeyCode::F(22) => vec![KeyCode::F22],
        event::KeyCode::F(23) => vec![KeyCode::F23],
        event::KeyCode::F(24) => vec![KeyCode::F24],
        event::KeyCode::Char('1') => vec![KeyCode::Key1],
        event::KeyCode::Char('2') => vec![KeyCode::Key2],
        event::KeyCode::Char('3') => vec![KeyCode::Key3],
        event::KeyCode::Char('4') => vec![KeyCode::Key4],
        event::KeyCode::Char('5') => vec![KeyCode::Key5],
        event::KeyCode::Char('6') => vec![KeyCode::Key6],
        event::KeyCode::Char('7') => vec![KeyCode::Key7],
        event::KeyCode::Char('8') => vec![KeyCode::Key8],
        event::KeyCode::Char('9') => vec![KeyCode::Key9],
        event::KeyCode::Char('0') => vec![KeyCode::Key0],
        event::KeyCode::Char('A') => vec![KeyCode::A],
        event::KeyCode::Char('B') => vec![KeyCode::B],
        event::KeyCode::Char('C') => vec![KeyCode::C],
        event::KeyCode::Char('D') => vec![KeyCode::D],
        event::KeyCode::Char('E') => vec![KeyCode::E],
        event::KeyCode::Char('F') => vec![KeyCode::F],
        event::KeyCode::Char('G') => vec![KeyCode::G],
        event::KeyCode::Char('H') => vec![KeyCode::H],
        event::KeyCode::Char('I') => vec![KeyCode::I],
        event::KeyCode::Char('J') => vec![KeyCode::J],
        event::KeyCode::Char('K') => vec![KeyCode::K],
        event::KeyCode::Char('L') => vec![KeyCode::L],
        event::KeyCode::Char('M') => vec![KeyCode::M],
        event::KeyCode::Char('N') => vec![KeyCode::N],
        event::KeyCode::Char('O') => vec![KeyCode::O],
        event::KeyCode::Char('P') => vec![KeyCode::P],
        event::KeyCode::Char('Q') => vec![KeyCode::Q],
        event::KeyCode::Char('R') => vec![KeyCode::R],
        event::KeyCode::Char('S') => vec![KeyCode::S],
        event::KeyCode::Char('T') => vec![KeyCode::T],
        event::KeyCode::Char('U') => vec![KeyCode::U],
        event::KeyCode::Char('V') => vec![KeyCode::V],
        event::KeyCode::Char('W') => vec![KeyCode::W],
        event::KeyCode::Char('X') => vec![KeyCode::X],
        event::KeyCode::Char('Y') => vec![KeyCode::Y],
        event::KeyCode::Char('Z') => vec![KeyCode::Z],
        event::KeyCode::Char('a') => vec![KeyCode::A],
        event::KeyCode::Char('b') => vec![KeyCode::B],
        event::KeyCode::Char('c') => vec![KeyCode::C],
        event::KeyCode::Char('d') => vec![KeyCode::D],
        event::KeyCode::Char('e') => vec![KeyCode::E],
        event::KeyCode::Char('f') => vec![KeyCode::F],
        event::KeyCode::Char('g') => vec![KeyCode::G],
        event::KeyCode::Char('h') => vec![KeyCode::H],
        event::KeyCode::Char('i') => vec![KeyCode::I],
        event::KeyCode::Char('j') => vec![KeyCode::J],
        event::KeyCode::Char('k') => vec![KeyCode::K],
        event::KeyCode::Char('l') => vec![KeyCode::L],
        event::KeyCode::Char('m') => vec![KeyCode::M],
        event::KeyCode::Char('n') => vec![KeyCode::N],
        event::KeyCode::Char('o') => vec![KeyCode::O],
        event::KeyCode::Char('p') => vec![KeyCode::P],
        event::KeyCode::Char('q') => vec![KeyCode::Q],
        event::KeyCode::Char('r') => vec![KeyCode::R],
        event::KeyCode::Char('s') => vec![KeyCode::S],
        event::KeyCode::Char('t') => vec![KeyCode::T],
        event::KeyCode::Char('u') => vec![KeyCode::U],
        event::KeyCode::Char('v') => vec![KeyCode::V],
        event::KeyCode::Char('w') => vec![KeyCode::W],
        event::KeyCode::Char('x') => vec![KeyCode::X],
        event::KeyCode::Char('y') => vec![KeyCode::Y],
        event::KeyCode::Char('z') => vec![KeyCode::Z],
        event::KeyCode::Char(',') => vec![KeyCode::Comma],
        event::KeyCode::Char('.') => vec![KeyCode::Period],
        event::KeyCode::Char('/') => vec![KeyCode::Slash],
        event::KeyCode::Char(';') => vec![KeyCode::Semicolon],
        event::KeyCode::Char(':') => vec![KeyCode::Colon],
        event::KeyCode::Char('\'') => vec![KeyCode::Apostrophe],
        event::KeyCode::Char('[') => vec![KeyCode::LBracket],
        event::KeyCode::Char(']') => vec![KeyCode::RBracket],
        event::KeyCode::Char('\\') => vec![KeyCode::Backslash],
        event::KeyCode::Char('`') => vec![KeyCode::Grave],
        event::KeyCode::Char('@') => vec![KeyCode::At],
        event::KeyCode::Char('*') => vec![KeyCode::Asterix],
        event::KeyCode::Char('-') => vec![KeyCode::Minus],
        event::KeyCode::Char('=') => vec![KeyCode::Equals],
        event::KeyCode::Char('+') => vec![KeyCode::Plus],
        event::KeyCode::Esc => vec![KeyCode::Escape],
        _ => vec![],
    };
    if event.modifiers.intersects(KeyModifiers::SHIFT) {
        key_codes.push(KeyCode::LShift);
    }
    if event.modifiers.intersects(KeyModifiers::CONTROL) {
        key_codes.push(KeyCode::LControl);
    }
    if event.modifiers.intersects(KeyModifiers::ALT) {
        key_codes.push(KeyCode::LAlt);
    }
    key_codes
}
